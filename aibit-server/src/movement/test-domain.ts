import { Movement, MovementType, Direction, MovementStatus } from './domain/entities/movement.entity';
import { Position } from './domain/value-objects/position.vo';
import { MovementSpeed } from './domain/value-objects/movement-speed.vo';

// Testes para Position Value Object
console.log('üß™ Testando Position Value Object...');

try {
  // Teste 1: Cria√ß√£o de posi√ß√£o v√°lida
  const position1 = new Position(100, 200, 7);
  console.log('‚úÖ Position criada com sucesso:', position1.toString());

  // Teste 2: Valida√ß√£o de coordenadas negativas
  try {
    new Position(-1, 0, 0);
    console.log('‚ùå Deveria ter falhado para coordenadas negativas');
  } catch (error: any) {
    console.log('‚úÖ Valida√ß√£o de coordenadas negativas funcionando:', error.message);
  }

  // Teste 3: Valida√ß√£o de coordenadas muito altas
  try {
    new Position(10000, 0, 0);
    console.log('‚ùå Deveria ter falhado para coordenadas muito altas');
  } catch (error: any) {
    console.log('‚úÖ Valida√ß√£o de coordenadas altas funcionando:', error.message);
  }

  // Teste 4: C√°lculo de dist√¢ncia
  const position2 = new Position(103, 204, 7);
  const distance = position1.distanceTo(position2);
  console.log('‚úÖ Dist√¢ncia calculada:', distance.toFixed(2));

  // Teste 5: Dist√¢ncia Manhattan
  const manhattanDistance = position1.manhattanDistanceTo(position2);
  console.log('‚úÖ Dist√¢ncia Manhattan:', manhattanDistance);

  // Teste 6: Posi√ß√µes vizinhas
  const neighbors = position1.getNeighbors();
  console.log('‚úÖ Posi√ß√µes vizinhas:', neighbors.length, 'posi√ß√µes');

  // Teste 7: Verificar se √© adjacente
  const adjacentPos = position1.moveEast();
  const isAdjacent = position1.isAdjacentTo(adjacentPos);
  console.log('‚úÖ √â adjacente:', isAdjacent);

  // Teste 8: Movimento em dire√ß√µes
  const northPos = position1.moveNorth();
  const southPos = position1.moveSouth();
  const eastPos = position1.moveEast();
  const westPos = position1.moveWest();
  console.log('‚úÖ Movimentos direcionais criados com sucesso');

  // Teste 9: Verificar se est√° no mesmo andar
  const sameFloor = position1.isSameFloor(position2);
  console.log('‚úÖ Mesmo andar:', sameFloor);

} catch (error: any) {
  console.error('‚ùå Erro nos testes de Position:', error.message);
}

// Testes para MovementSpeed Value Object
console.log('\nüß™ Testando MovementSpeed Value Object...');

try {
  // Teste 1: Velocidades predefinidas
  const walkSpeed = MovementSpeed.walk();
  const runSpeed = MovementSpeed.run();
  const teleportSpeed = MovementSpeed.teleport();

  console.log('‚úÖ Velocidade de caminhada:', walkSpeed.getValue());
  console.log('‚úÖ Velocidade de corrida:', runSpeed.getValue());
  console.log('‚úÖ Velocidade de teleporte:', teleportSpeed.getValue());

  // Teste 2: Velocidade customizada
  const customSpeed = new MovementSpeed(2.5);
  console.log('‚úÖ Velocidade customizada:', customSpeed.getValue());

  // Teste 3: Convers√µes
  console.log('‚úÖ Convers√£o para tiles/segundo:', customSpeed.toTilesPerSecond());
  console.log('‚úÖ Convers√£o para milissegundos/tile:', customSpeed.toMillisecondsPerTile());

  // Teste 4: Valida√ß√£o de velocidade inv√°lida
  try {
    new MovementSpeed(-1);
    console.log('‚ùå Deveria ter falhado para velocidade negativa');
  } catch (error: any) {
    console.log('‚úÖ Valida√ß√£o de velocidade negativa funcionando:', error.message);
  }

  // Teste 5: Valida√ß√£o de velocidade muito alta
  try {
    new MovementSpeed(1000);
    console.log('‚ùå Deveria ter falhado para velocidade muito alta');
  } catch (error: any) {
    console.log('‚úÖ Valida√ß√£o de velocidade alta funcionando:', error.message);
  }

} catch (error: any) {
  console.error('‚ùå Erro nos testes de MovementSpeed:', error.message);
}

// Testes para Movement Entity
console.log('\nüß™ Testando Movement Entity...');

try {
  const fromPos = { x: 100, y: 100, z: 7 };
  const toPos = { x: 101, y: 100, z: 7 };
  const source = {
    entityId: 'player-123',
    entityName: 'TestPlayer',
    entityType: 'character' as const
  };

  // Teste 1: Cria√ß√£o de movimento b√°sico
  const movement = new Movement(
    'entity-123',
    fromPos,
    toPos,
    MovementType.WALK,
    source,
    1.0
  );

  console.log('‚úÖ Movement criado:', movement.getId());
  console.log('‚úÖ Dire√ß√£o calculada:', movement.getDirection());
  console.log('‚úÖ Dist√¢ncia calculada:', movement.getDistance());
  console.log('‚úÖ Dura√ß√£o calculada:', movement.getDuration(), 'ms');

  // Teste 2: Movimento diagonal
  const diagonalMovement = new Movement(
    'entity-123',
    fromPos,
    { x: 101, y: 101, z: 7 },
    MovementType.RUN,
    source,
    2.0
  );

  console.log('‚úÖ Movimento diagonal - Dire√ß√£o:', diagonalMovement.getDirection());
  console.log('‚úÖ Movimento diagonal - Dist√¢ncia:', diagonalMovement.getDistance().toFixed(2));

  // Teste 3: Movimento de teleporte
  const teleportMovement = new Movement(
    'entity-123',
    fromPos,
    { x: 150, y: 150, z: 7 },
    MovementType.TELEPORT,
    source,
    10.0
  );

  console.log('‚úÖ Teleporte - Dist√¢ncia:', teleportMovement.getDistance().toFixed(2));
  console.log('‚úÖ Teleporte - Dura√ß√£o:', teleportMovement.getDuration(), 'ms');

  // Teste 4: Valida√ß√£o de entidade inv√°lida
  try {
    new Movement('', fromPos, toPos, MovementType.WALK, source);
    console.log('‚ùå Deveria ter falhado para entidade vazia');
  } catch (error: any) {
    console.log('‚úÖ Valida√ß√£o de entidade vazia funcionando:', error.message);
  }

  // Teste 5: Valida√ß√£o de posi√ß√µes iguais
  try {
    new Movement('entity-123', fromPos, fromPos, MovementType.WALK, source);
    console.log('‚ùå Deveria ter falhado para posi√ß√µes iguais');
  } catch (error: any) {
    console.log('‚úÖ Valida√ß√£o de posi√ß√µes iguais funcionando:', error.message);
  }

  // Teste 6: Valida√ß√£o de velocidade inv√°lida
  try {
    new Movement('entity-123', fromPos, toPos, MovementType.WALK, source, 0);
    console.log('‚ùå Deveria ter falhado para velocidade zero');
  } catch (error: any) {
    console.log('‚úÖ Valida√ß√£o de velocidade zero funcionando:', error.message);
  }

  // Teste 7: Getters
  console.log('‚úÖ Entity ID:', movement.getEntityId());
  console.log('‚úÖ Type:', movement.getType());
  console.log('‚úÖ Source:', movement.getSource());
  console.log('‚úÖ Timestamp:', movement.getTimestamp());
  console.log('‚úÖ Speed:', movement.getSpeed());
  console.log('‚úÖ Stamina Cost:', movement.getStaminaCost());

  // Teste 8: Teste de c√°lculo de custo de stamina
  const longMovement = new Movement(
    'entity-123',
    fromPos,
    { x: 110, y: 110, z: 7 },
    MovementType.RUN,
    source,
    3.0
  );
  console.log('‚úÖ Stamina cost para movimento longo:', longMovement.getStaminaCost());

} catch (error: any) {
  console.error('‚ùå Erro nos testes de Movement:', error.message);
}

// Testes de cen√°rios complexos
console.log('\nüß™ Testando cen√°rios complexos...');

try {
  // Teste 1: Sequ√™ncia de movimentos
  const entityId = 'player-456';
  const source = {
    entityId: 'system',
    entityName: 'Game System',
    entityType: 'system' as const
  };

  const movements = [];
  let currentPos = { x: 100, y: 100, z: 7 };

  // Simular uma caminhada de 5 tiles para o leste
  for (let i = 0; i < 5; i++) {
    const nextPos = { x: currentPos.x + 1, y: currentPos.y, z: currentPos.z };
    const movement = new Movement(
      entityId,
      currentPos,
      nextPos,
      MovementType.WALK,
      source,
      1.0
    );
    movements.push(movement);
    currentPos = nextPos;
  }

  console.log('‚úÖ Sequ√™ncia de 5 movimentos criada');
  console.log('‚úÖ Posi√ß√£o final:', currentPos);
  console.log('‚úÖ Tempo total estimado:', movements.reduce((total, m) => total + m.getDuration(), 0), 'ms');

  // Teste 2: Movimentos em diferentes velocidades
  const speeds = [0.5, 1.0, 1.5, 2.0, 3.0];
  speeds.forEach(speed => {
    const movement = new Movement(
      entityId,
      { x: 0, y: 0, z: 7 },
      { x: 1, y: 0, z: 7 },
      MovementType.WALK,
      source,
      speed
    );
    console.log(`‚úÖ Velocidade ${speed}: ${movement.getDuration()}ms`);
  });

} catch (error: any) {
  console.error('‚ùå Erro nos testes complexos:', error.message);
}

console.log('\nüéâ Testes do dom√≠nio Movement conclu√≠dos!');
