import { Injectable } from '@nestjs/common';
import { RequestMovementUseCase } from './application/use-cases/request-movement.use-case';
import { TeleportEntityUseCase } from './application/use-cases/teleport-entity.use-case';
import { CancelMovementUseCase } from './application/use-cases/cancel-movement.use-case';
import { GetMovementStatusUseCase } from './application/use-cases/get-movement-status.use-case';
import { GetMovementHistoryUseCase } from './application/use-cases/get-movement-history.use-case';
import { GetMovementStatisticsUseCase } from './application/use-cases/get-movement-statistics.use-case';
import { DeleteMovementUseCase } from './application/use-cases/delete-movement.use-case';
import { MovementType, MovementSource } from './domain/entities/movement.entity';
import { MovementEvent } from './domain/entities/movement-event.entity';
import { ExecuteMovementDto } from './dto/execute-movement.dto';

@Injectable()
export class MovementService {
  constructor(
    private readonly requestMovementUseCase: RequestMovementUseCase,
    private readonly teleportEntityUseCase: TeleportEntityUseCase,
    private readonly cancelMovementUseCase: CancelMovementUseCase,
    private readonly getMovementStatusUseCase: GetMovementStatusUseCase,
    private readonly getMovementHistoryUseCase: GetMovementHistoryUseCase,
    private readonly getMovementStatisticsUseCase: GetMovementStatisticsUseCase,
    private readonly deleteMovementUseCase: DeleteMovementUseCase,
  ) {}

  // Solicita um movimento para uma entidade
  async requestMovement(dto: ExecuteMovementDto): Promise<any> {
    const source: MovementSource = {
      entityId: dto.source.sourceId,
      entityName: dto.source.sourceName,
      entityType: dto.source.sourceType as 'character' | 'creature' | 'npc' | 'system',
    };

    const event = await this.requestMovementUseCase.execute(
      dto.entityId,
      dto.fromPosition,
      dto.toPosition,
      dto.movementType,
      source,
      dto.speed,
    );

    return {
      eventId: event.getId(),
      entityId: dto.entityId,
      fromPosition: dto.fromPosition,
      toPosition: dto.toPosition,
      movementType: dto.movementType,
      status: 'pending',
      message: 'Movimento agendado para processamento',
    };
  }

  // Método de compatibilidade (substituirá o executeMovement)
  async executeMovement(dto: ExecuteMovementDto): Promise<any> {
    return this.requestMovement(dto);
  }

  // Teleporta uma entidade para uma posição
  async teleportEntity(
    entityId: string,
    targetPosition: any,
    sourceEntityId: string,
    sourceName: string = 'System',
  ): Promise<any> {
    const event = await this.teleportEntityUseCase.execute(
      entityId,
      targetPosition,
      sourceEntityId,
      sourceName,
    );

    return {
      eventId: event.getId(),
      entityId,
      targetPosition,
      status: 'pending',
      message: 'Teleporte agendado para processamento',
    };
  }

  // Cancela um movimento em andamento
  async cancelMovement(entityId: string, reason: string = 'Cancelled by request'): Promise<any> {
    try {
      const event = await this.cancelMovementUseCase.execute(entityId, reason);

      return {
        eventId: event.getId(),
        entityId,
        status: 'pending',
        message: 'Cancelamento de movimento agendado para processamento',
      };
    } catch (error) {
      return {
        entityId,
        status: 'failed',
        message: error.message,
      };
    }
  }

  // Obtém o status de movimento de uma entidade
  async getMovementStatus(entityId: string): Promise<any> {
    return this.getMovementStatusUseCase.execute(entityId);
  }

  // Métodos existentes para histórico de movimentos (reutilizando)
  async getMovementsByEntity(entityId: string, limit?: number): Promise<any[]> {
    const movements = await this.getMovementHistoryUseCase.getMovementsByEntity(entityId, limit);
    return movements.map(movement => movement.toJSON());
  }

  async getRecentMovements(entityId: string, minutes?: number): Promise<any[]> {
    const movements = await this.getMovementHistoryUseCase.getRecentMovements(entityId, minutes || 5);
    return movements.map(movement => movement.toJSON());
  }

  async getMovementPath(entityId: string, limit?: number): Promise<any[]> {
    const movements = await this.getMovementHistoryUseCase.getMovementPath(entityId, limit || 10);
    return movements.map(movement => movement.toJSON());
  }

  async getLastMovement(entityId: string): Promise<any | null> {
    const movement = await this.getMovementHistoryUseCase.getLastMovement(entityId);
    return movement ? movement.toJSON() : null;
  }

  async getEntityPositionInfo(entityId: string): Promise<any> {
    // Usa o status de movimento ao invés do histórico
    return this.getMovementStatus(entityId);
  }

  // Métodos para estatísticas (reutilizando)
  async getEntityStatistics(entityId: string): Promise<any> {
    return this.getMovementStatisticsUseCase.getEntityStatistics(entityId);
  }

  async getGlobalStatistics(timeRangeMinutes?: number): Promise<any> {
    return this.getMovementStatisticsUseCase.getGlobalStatistics(timeRangeMinutes);
  }

  // Métodos para consultas específicas de posição
  async getMovementsToPosition(x: number, y: number, z: number): Promise<any[]> {
    const movements = await this.getMovementHistoryUseCase.getMovementsToPosition(x, y, z);
    return movements.map(movement => movement.toJSON());
  }

  async getMovementsFromPosition(x: number, y: number, z: number): Promise<any[]> {
    const movements = await this.getMovementHistoryUseCase.getMovementsFromPosition(x, y, z);
    return movements.map(movement => movement.toJSON());
  }

  async getMovementsInArea(startX: number, startY: number, endX: number, endY: number, z: number): Promise<any[]> {
    const movements = await this.getMovementHistoryUseCase.getMovementsInArea(startX, startY, endX, endY, z);
    return movements.map(movement => movement.toJSON());
  }

  async getEntitiesInRange(x: number, y: number, z: number, range: number): Promise<string[]> {
    return this.getMovementHistoryUseCase.getEntitiesInRange(x, y, z, range);
  }

  // Métodos para busca de movimento por ID
  async getMovementById(id: string): Promise<any> {
    const movement = await this.getMovementHistoryUseCase.getMovementById(id);
    return movement ? movement.toJSON() : null;
  }

  // Métodos para deleção
  async deleteMovement(id: string): Promise<boolean> {
    return this.deleteMovementUseCase.deleteMovement(id);
  }

  async deleteMovementsByEntity(entityId: string): Promise<number> {
    return this.deleteMovementUseCase.deleteMovementsByEntity(entityId);
  }

  async deleteOldMovements(days: number): Promise<number> {
    return this.deleteMovementUseCase.deleteOldMovements(days);
  }
}
